{
  "hash": "bc556851d4909219017a84c6c66d79c4",
  "result": {
    "markdown": "---\ntitle: \"Tidy Tuesday 30 Jan 2024: Groundhogs\"\nsubtitle: \"Even tardier than usual...\"\ndate: \"2024-02-02\"\nauthor: \n    - \"Brendan Clarke\"\n    - \"Jon Minton\"\n    - \"Kennedy Owusu-Afriyie\"\n    - \"Katie Pyper\"\n    - \"Andrew Saul\"\ncode-fold: true\ncategories: [R, Tidy Tuesday, North America]\n---\n\n\nThe latest TidyTuesday dataset is on [Groundhog Days](https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-01-30/readme.md), a North American tradition in which the behaviours of specific groundhogs are used to make predictions about the weather over the next six weeks, as immortalised in [the eponymous sci-fi rom-com featuring Bill Murray](https://en.wikipedia.org/wiki/Groundhog_Day_(film)). \n\nOddly, the data provided *does not* include meteorological information on whether the groundhogs' predictions are accurate. (Who knows? Maybe they are!) But the data do include latitude, longitude, and other geographic information. So, we decided to see if we could plot these Groundhog Day events on an interactive map. \n\nFirst we load the data, using the bespoke `tidytuesdayR` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# The number of queries made via tidyTuesdayR is limited. The commented code below shows how to extract the TidyTuesday data using the tidytuesdayR package. Instead I'll link directly:\n# dat <- tidytuesdayR::tt_load('2024-01-30')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# predictions <- dat |>\n#   pluck(1) # that's the predictions\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# dat |>\n#   pluck(2) # that's the groundhogs\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# groundhogs <- dat |>\n#   pluck(2) \n\n# Direct approach \n\ngroundhogs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-30/groundhogs.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 75 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): slug, shortname, name, city, region, country, source, current_pred...\ndbl  (4): id, latitude, longitude, predictions_count\nlgl  (2): is_groundhog, active\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\npredictions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-30/predictions.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1462 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): details\ndbl (2): id, year\nlgl (1): shadow\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nWe now have the two datasets in separate objects. Let's look at some of the information in the description field\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroundhogs |>\n  filter(!is_groundhog) |>\n  select(description)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 43 × 1\n   description                                                                  \n   <chr>                                                                        \n 1 Octoraro Orphie, from Quarryville Pennsylvania, is a taxidermied world-renow…\n 2 Concord Charlie is a presumed groundhog from Athens, West Virginia. In a tra…\n 3 Lander Lil, a bronze statue of a prairie dog, has been predicting the future…\n 4 Groundhog puppet Manitoba Merv has been predicting the arrival of spring at …\n 5 Schnogadahl Sammi is a literally unpronounceable taxidermied groundhog mount…\n 6 Poor Richard is a taxidermied groundhog who prognosticates for the Slumberin…\n 7 Balzac Billy is the “Prairie Prognosticator”, a man-sized gopher mascot who …\n 8 Every year on February 2nd, Myerstown’s favorite groundhog “Uni” is placed o…\n 9 Grover the Groundhog and Sweet Arrow Sue are a taxidermied groundhog couple …\n10 Stormy Marmot is a plush yellow-bellied marmot from Aurora, Colorado. He is …\n# ℹ 33 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions |>\n  count(shadow, sort=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  shadow     n\n  <lgl>  <int>\n1 TRUE     665\n2 FALSE    652\n3 NA       145\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# dat |>\n#   pluck(1) |>\n#   left_join(groundhogs) \npredictions |> \n    left_join(groundhogs)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(id)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,462 × 20\n      id  year shadow details         slug  shortname name  city  region country\n   <dbl> <dbl> <lgl>  <chr>           <chr> <chr>     <chr> <chr> <chr>  <chr>  \n 1     1  1886 NA     Groundhog Day … punx… Phil      Punx… Punx… Penns… USA    \n 2     1  1887 TRUE   First Official… punx… Phil      Punx… Punx… Penns… USA    \n 3     1  1888 TRUE   Saw Shadow.     punx… Phil      Punx… Punx… Penns… USA    \n 4     1  1889 NA     No Record.      punx… Phil      Punx… Punx… Penns… USA    \n 5     1  1890 FALSE  No Shadow.      punx… Phil      Punx… Punx… Penns… USA    \n 6     1  1891 NA     No Record.      punx… Phil      Punx… Punx… Penns… USA    \n 7     1  1892 NA     No Record.      punx… Phil      Punx… Punx… Penns… USA    \n 8     1  1893 NA     No Record.      punx… Phil      Punx… Punx… Penns… USA    \n 9     1  1894 NA     No Record.      punx… Phil      Punx… Punx… Penns… USA    \n10     1  1895 NA     No Record.      punx… Phil      Punx… Punx… Penns… USA    \n# ℹ 1,452 more rows\n# ℹ 10 more variables: latitude <dbl>, longitude <dbl>, source <chr>,\n#   current_prediction <chr>, is_groundhog <lgl>, type <chr>, active <lgl>,\n#   description <chr>, image <chr>, predictions_count <dbl>\n```\n:::\n:::\n\n\n## Mapping \nWe decided to try using [Leaflet](https://rstudio.github.io/leaflet/) to plot where the Groundhog day events occurred. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages('leaflet')\nlibrary(leaflet)\n```\n:::\n\n\nWe start by following one of the first examples in the Leaflet intro page above, adding markers to geolocate the sightings/events, and a popup with the name (assigned to) the Groundhog:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroundhogs |>\n  select(lat = latitude, lng = longitude, popup = name) |>\n  leaflet() |>\n  addTiles()|>\n  addMarkers(~lng, ~lat, popup = ~popup)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-d08c68b3c41165d3d793\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d08c68b3c41165d3d793\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[[40.9311988,39.8255413,44.7438686,43.1826322,37.4245956,40.6141291,33.233898,38.8573662,40.732973,42.4609398,40.6793192,40.6251281,42.830629,50.1738294,40.7967917,45.0921321,42.523758,42.3142948,35.7821867,40.9014222,39.9658603,51.1908339,40.4181266,40.5716175,42.4094032,39.6890151,41.7555391,41.2109112,40.0247794,47.812527,45.9364617,30.304515,43.124424,48.5143473,42.8156259,41.2097196,34.1666754,39.1014751,42.7245868,39.9979137,43.0208392,41.9735597,40.1091208,43.6078333,40.33607,41.5830468,37.0699814,41.901251,35.6800912,48.5224835,39.8921524,41.6818106,39.9335365,40.290503,42.7669782,38.9097387,34.7159524,49.159641,39.9362979,41.6904499,41.2634599,43.0315284,43.5128603,40.2467673,40.1213254,45.5100569,34.6229744,39.303483,40.0588008,42.7669782,40.7674513,50.2400127,35.243478,39.6528658,40.6834005],[-78.9622483,-76.0919567,-81.1386838,-89.21432040000001,-81.00959020000001,-83.1321507,-83.9466163,-80.3149827,-89.7383042,-79.3944887,-73.6665466,-74.1175587,-108.722943,-97.1351477,-73.0358701,-63.397339,-83.9529562,-88.4477184,-78.64148609999999,-75.497874,-76.729263,-114.0008889,-76.29992319999999,-76.3676593,-71.33395230000001,-104.8269175,-72.5221167,-74.6968543,-105.2271559,-122.3818957,-60.3005507,-97.93843,-80.75442409999999,-64.3996831,-81.5525152,-73.1843214,-86.1192772,-78.19451460000001,-78.67326919999999,-76.85716789999999,-79.3629854,-77.201705,-76.5043106,-116.2049143,-75.9078327,-93.6206605,-76.4818192,-72.0815198,-78.6279155,-117.8912722,-75.25721369999999,-83.66751259999999,-82.50181600000001,-75.3823447,-82.1832562,-77.043891,-86.5418817,-124.0503748,-120.9523743,-81.25263030000001,-73.7307821,-88.0424457,-65.611397,-76.4677586,-76.6644525,-122.7158264,-83.8676887,-85.77310679999999,-76.30729770000001,-82.1832562,-74.2839038,-119.2915259,-82.7769959,-78.7646866,-96.2751068],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"Punxsutawney Phil\",\"Octoraro Orphie\",\"Wiarton Willie\",\"Jimmy the Groundhog\",\"Concord Charlie\",\"Buckeye Chuck\",\"General Beauregard Lee\",\"French Creek Freddie\",\"Gertie the Groundhog\",\"Dunkirk Dave\",\"Malverne Mel\",\"Staten Island Chuck\",\"Lander Lil\",\"Manitoba Merv\",\"Holtsville Hal\",\"Shubenacadie Sam\",\"Woody the Woodchuck\",\"Woodstock Willie\",\"Sir Walter Wally\",\"Schnogadahl Sammi\",\"Poor Richard\",\"Balzac Billy\",\"Uni the Groundhog\",\"Grover and Sue\",\"Ms. G\",\"Stormy Marmot\",\"Chuckles the Groundhog\",\"Stonewall Jackson\",\"Flatiron Freddy\",\"Snohomish Slew\",\"Two Rivers Tunnel\",\"Bee Cave Bob\",\"Chilly Charlie\",\"Fred la Marmotte\",\"Middlemiss Mike\",\"Beardsley Bart\",\"Sand Mountain Sam\",\"Bowman Bill\",\"Buffalo Bert\",\"Dover Doug\",\"Fenwick Flossie\",\"Lawrenceville Lucy\",\"Mount Joy Minnie\",\"Boise Bill\",\"Patty Pagoda\",\"Polk County Paula\",\"Chesapeake Chuck\",\"Scramble the Duck\",\"Snerd\",\"Snowy the Prairie Dog\",\"Tinicum Tim\",\"Wildwood Willie\",\"Benny the Bass\",\"Harleysville Hank\",\"Oil Springs Ollie\",\"Potomac Phil\",\"Smith Lake Jake\",\"Van Island Violet\",\"Chuck Wood\",\"Concord Casimir\",\"Cluxatawney Henrietta\",\"Gordy the Groundhog\",\"Lucy the Lobster\",\"Mount Gretna Grady\",\"Poppy the Groundhog\",\"Stumptown Fil\",\"Yonah the Groundhog\",\"Hope the Groundhog\",\"MT Parker\",\"Heaven’s Wildlife Harvey\",\"Lady Edwina of Essex\",\"Okanagan Okie\",\"Pisgah Penny\",\"Queen City Charlie\",\"Unadilla Billie\"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[30.304515,51.1908339],\"lng\":[-124.0503748,-60.3005507]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nWe next wanted to colour these markers based on whether the predictions are classed as 'active' or not. This was slightly more tricky, but the example given in the **Awesome Icons** section of [the markers part of the Leaflet documentation](https://rstudio.github.io/leaflet/markers.html) gave the following code pattern we could work with: \n\n```{{r}}\n# first 20 quakes\ndf.20 <- quakes[1:20,]\n\ngetColor <- function(quakes) {\n  sapply(quakes$mag, function(mag) {\n  if(mag <= 4) {\n    \"green\"\n  } else if(mag <= 5) {\n    \"orange\"\n  } else {\n    \"red\"\n  } })\n}\n\nicons <- awesomeIcons(\n  icon = 'ios-close',\n  iconColor = 'black',\n  library = 'ion',\n  markerColor = getColor(df.20)\n)\n\nleaflet(df.20) %>% addTiles() %>%\n  addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))\n\n```\n\nSo, in the above `addAwesomeMarkers()` is used in place of `addMarkers()`, and takes an argument `icon`. A vector of icons is created of the same length as the number of rows of the dataframe, whose colour is determined through the `getColor` function. \n\nIn our case we are interested in the `active` column, which has just two mutually exclusive categories: `TRUE` and `FALSE`. So we just need two colours to be specified \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We saw if we could implement the code pattern above using list columns, but were not successful\n\n# colouring markers\n# groundhogs_icons <- groundhogs |>\n#   mutate(markerColor = ifelse(active, \"green\", \"red\")) |>\n#   rowwise() |>\n#   mutate(icon = list(awesomeIcons(\n#     icon = 'ios-close',\n#     iconColor = 'black',\n#     library = 'ion',\n#     markerColor = markerColor\n#   )))\n\ngetColor <- function(groundhogs) {\n  sapply(groundhogs$active, function(active) {\n    if(active) {\n      \"green\"  } else {\n          \"red\"  } })\n}\n\n# create vector of matching vectors\nicons <- awesomeIcons(\n  icon = 'ios-close',\n  iconColor = 'black',\n  library = 'ion',\n  markerColor = getColor(groundhogs)\n)\n\n# now with active/inactive icons\n\ngroundhogs |>\n  select(lat = latitude, lng = longitude, popup = name) |>\n  leaflet() |>\n  addTiles()|>\n  addAwesomeMarkers(~lng, ~lat, popup = ~popup, icon = icons)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-f682ff9b4ce0fa8d3d89\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f682ff9b4ce0fa8d3d89\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addAwesomeMarkers\",\"args\":[[40.9311988,39.8255413,44.7438686,43.1826322,37.4245956,40.6141291,33.233898,38.8573662,40.732973,42.4609398,40.6793192,40.6251281,42.830629,50.1738294,40.7967917,45.0921321,42.523758,42.3142948,35.7821867,40.9014222,39.9658603,51.1908339,40.4181266,40.5716175,42.4094032,39.6890151,41.7555391,41.2109112,40.0247794,47.812527,45.9364617,30.304515,43.124424,48.5143473,42.8156259,41.2097196,34.1666754,39.1014751,42.7245868,39.9979137,43.0208392,41.9735597,40.1091208,43.6078333,40.33607,41.5830468,37.0699814,41.901251,35.6800912,48.5224835,39.8921524,41.6818106,39.9335365,40.290503,42.7669782,38.9097387,34.7159524,49.159641,39.9362979,41.6904499,41.2634599,43.0315284,43.5128603,40.2467673,40.1213254,45.5100569,34.6229744,39.303483,40.0588008,42.7669782,40.7674513,50.2400127,35.243478,39.6528658,40.6834005],[-78.9622483,-76.0919567,-81.1386838,-89.21432040000001,-81.00959020000001,-83.1321507,-83.9466163,-80.3149827,-89.7383042,-79.3944887,-73.6665466,-74.1175587,-108.722943,-97.1351477,-73.0358701,-63.397339,-83.9529562,-88.4477184,-78.64148609999999,-75.497874,-76.729263,-114.0008889,-76.29992319999999,-76.3676593,-71.33395230000001,-104.8269175,-72.5221167,-74.6968543,-105.2271559,-122.3818957,-60.3005507,-97.93843,-80.75442409999999,-64.3996831,-81.5525152,-73.1843214,-86.1192772,-78.19451460000001,-78.67326919999999,-76.85716789999999,-79.3629854,-77.201705,-76.5043106,-116.2049143,-75.9078327,-93.6206605,-76.4818192,-72.0815198,-78.6279155,-117.8912722,-75.25721369999999,-83.66751259999999,-82.50181600000001,-75.3823447,-82.1832562,-77.043891,-86.5418817,-124.0503748,-120.9523743,-81.25263030000001,-73.7307821,-88.0424457,-65.611397,-76.4677586,-76.6644525,-122.7158264,-83.8676887,-85.77310679999999,-76.30729770000001,-82.1832562,-74.2839038,-119.2915259,-82.7769959,-78.7646866,-96.2751068],{\"icon\":\"ios-close\",\"markerColor\":[\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"red\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"red\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"red\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\"],\"iconColor\":\"black\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"ion\"},null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"Punxsutawney Phil\",\"Octoraro Orphie\",\"Wiarton Willie\",\"Jimmy the Groundhog\",\"Concord Charlie\",\"Buckeye Chuck\",\"General Beauregard Lee\",\"French Creek Freddie\",\"Gertie the Groundhog\",\"Dunkirk Dave\",\"Malverne Mel\",\"Staten Island Chuck\",\"Lander Lil\",\"Manitoba Merv\",\"Holtsville Hal\",\"Shubenacadie Sam\",\"Woody the Woodchuck\",\"Woodstock Willie\",\"Sir Walter Wally\",\"Schnogadahl Sammi\",\"Poor Richard\",\"Balzac Billy\",\"Uni the Groundhog\",\"Grover and Sue\",\"Ms. G\",\"Stormy Marmot\",\"Chuckles the Groundhog\",\"Stonewall Jackson\",\"Flatiron Freddy\",\"Snohomish Slew\",\"Two Rivers Tunnel\",\"Bee Cave Bob\",\"Chilly Charlie\",\"Fred la Marmotte\",\"Middlemiss Mike\",\"Beardsley Bart\",\"Sand Mountain Sam\",\"Bowman Bill\",\"Buffalo Bert\",\"Dover Doug\",\"Fenwick Flossie\",\"Lawrenceville Lucy\",\"Mount Joy Minnie\",\"Boise Bill\",\"Patty Pagoda\",\"Polk County Paula\",\"Chesapeake Chuck\",\"Scramble the Duck\",\"Snerd\",\"Snowy the Prairie Dog\",\"Tinicum Tim\",\"Wildwood Willie\",\"Benny the Bass\",\"Harleysville Hank\",\"Oil Springs Ollie\",\"Potomac Phil\",\"Smith Lake Jake\",\"Van Island Violet\",\"Chuck Wood\",\"Concord Casimir\",\"Cluxatawney Henrietta\",\"Gordy the Groundhog\",\"Lucy the Lobster\",\"Mount Gretna Grady\",\"Poppy the Groundhog\",\"Stumptown Fil\",\"Yonah the Groundhog\",\"Hope the Groundhog\",\"MT Parker\",\"Heaven’s Wildlife Harvey\",\"Lady Edwina of Essex\",\"Okanagan Okie\",\"Pisgah Penny\",\"Queen City Charlie\",\"Unadilla Billie\"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[30.304515,51.1908339],\"lng\":[-124.0503748,-60.3005507]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\nChallenge complete! As we would expect, most predictions are not currently active.\n\n## Other possibilities\n\nSome other things we could have explored include:\n\n- Attempting to link to appropriate meteorological data to see if the predictions came true at more than chance rates (likely a challenge)\n- Natural Language Programming to identify patterns and key terms in the free text fields like description\n- Additional customisation of the leaflet maps, such as including additional popup fields, further customising the icons based on multiple variables, and adding date sliders to give a third dimension (latitude, longitude, and date) to the user display\n\n## Additional \n\nAndrew presented the following code solution for how to use `plotly` to produce multiple traces based on summary stats:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\ndf <- \n  mpg %>% \n  summarise(avg_city = mean(cty), .by = c(manufacturer, year))\n\nmanfs <- df %>% distinct(manufacturer) %>% pull()\n\np <- plot_ly()\n\nfor(manf in manfs){\n  df_manf <- df %>% \n    filter(manufacturer == manf)\n  p <- add_trace(p,\n                 mode = \"lines+markers\",\n                 x = ~year,\n                 y = ~avg_city,\n                 data = df_manf) # must include new df as data for plolty layer\n}\n\np\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-54d1b0f541b62f85ae6b\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-54d1b0f541b62f85ae6b\">{\"x\":{\"visdat\":{\"1745fcc60ad3\":[\"function () \",\"plotlyVisDat\"],\"1745f1df0a932\":[\"function () \",\"data\"],\"1745f22f420f9\":[\"function () \",\"data\"],\"1745f49a0cd5c\":[\"function () \",\"data\"],\"1745f5c0a78c7\":[\"function () \",\"data\"],\"1745f337f8006\":[\"function () \",\"data\"],\"1745f77ae2453\":[\"function () \",\"data\"],\"1745f49d30287\":[\"function () \",\"data\"],\"1745f3c4b12ee\":[\"function () \",\"data\"],\"1745f64c7e62e\":[\"function () \",\"data\"],\"1745f7fd909b2\":[\"function () \",\"data\"],\"1745f20bc6b1\":[\"function () \",\"data\"],\"1745f53218f83\":[\"function () \",\"data\"],\"1745f40550c18\":[\"function () \",\"data\"],\"1745ff8d1ca7\":[\"function () \",\"data\"],\"1745f79541fea\":[\"function () \",\"data\"]},\"cur_data\":\"1745f79541fea\",\"attrs\":{\"1745f1df0a932\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f22f420f9\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f49a0cd5c\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f5c0a78c7\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f337f8006\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f77ae2453\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f49d30287\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f3c4b12ee\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f64c7e62e\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f7fd909b2\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f20bc6b1\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f53218f83\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f40550c18\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745ff8d1ca7\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true},\"1745f79541fea\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"mode\":\"lines+markers\",\"x\":{},\"y\":{},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"year\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"avg_city\"},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[17.111111111111111,18.111111111111111],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[2008,1999],\"y\":[14.916666666666666,15.142857142857142],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[13.375,12.952380952380953],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[13.933333333333334,14.1],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(214,39,40,1)\",\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"line\":{\"color\":\"rgba(214,39,40,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[24.800000000000001,24],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(148,103,189,1)\",\"line\":{\"color\":\"rgba(148,103,189,1)\"}},\"error_y\":{\"color\":\"rgba(148,103,189,1)\"},\"error_x\":{\"color\":\"rgba(148,103,189,1)\"},\"line\":{\"color\":\"rgba(148,103,189,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[18.333333333333332,18.875],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(140,86,75,1)\",\"line\":{\"color\":\"rgba(140,86,75,1)\"}},\"error_y\":{\"color\":\"rgba(140,86,75,1)\"},\"error_x\":{\"color\":\"rgba(140,86,75,1)\"},\"line\":{\"color\":\"rgba(140,86,75,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[2008,1999],\"y\":[13.166666666666666,14.5],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(227,119,194,1)\",\"line\":{\"color\":\"rgba(227,119,194,1)\"}},\"error_y\":{\"color\":\"rgba(227,119,194,1)\"},\"error_x\":{\"color\":\"rgba(227,119,194,1)\"},\"line\":{\"color\":\"rgba(227,119,194,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[11,12],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(127,127,127,1)\",\"line\":{\"color\":\"rgba(127,127,127,1)\"}},\"error_y\":{\"color\":\"rgba(127,127,127,1)\"},\"error_x\":{\"color\":\"rgba(127,127,127,1)\"},\"line\":{\"color\":\"rgba(127,127,127,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[11,12],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(188,189,34,1)\",\"line\":{\"color\":\"rgba(188,189,34,1)\"}},\"error_y\":{\"color\":\"rgba(188,189,34,1)\"},\"error_x\":{\"color\":\"rgba(188,189,34,1)\"},\"line\":{\"color\":\"rgba(188,189,34,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[13.5,13],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(23,190,207,1)\",\"line\":{\"color\":\"rgba(23,190,207,1)\"}},\"error_y\":{\"color\":\"rgba(23,190,207,1)\"},\"error_x\":{\"color\":\"rgba(23,190,207,1)\"},\"line\":{\"color\":\"rgba(23,190,207,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[17.666666666666668,18.428571428571427],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[17,17],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[19,19.5],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[18.149999999999999,19.071428571428573],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(214,39,40,1)\",\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"line\":{\"color\":\"rgba(214,39,40,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines+markers\",\"x\":[1999,2008],\"y\":[21.25,20.454545454545453],\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(148,103,189,1)\",\"line\":{\"color\":\"rgba(148,103,189,1)\"}},\"error_y\":{\"color\":\"rgba(148,103,189,1)\"},\"error_x\":{\"color\":\"rgba(148,103,189,1)\"},\"line\":{\"color\":\"rgba(148,103,189,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/leaflet-binding-2.2.1/leaflet.js\"></script>\n<link href=\"../../../site_libs/leaflet-awesomemarkers-2.0.3/leaflet.awesome-markers.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/leaflet-awesomemarkers-2.0.3/leaflet.awesome-markers.min.js\"></script>\n<link href=\"../../../site_libs/ionicons-2.0.1/ionicons.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<link href=\"../../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}