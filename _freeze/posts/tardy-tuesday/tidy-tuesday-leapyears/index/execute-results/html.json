{
  "hash": "59e8a370c7f734480edafba94b9c075c",
  "result": {
    "markdown": "---\ntitle: \"Tidy Tuesday 27 Feb 2024: Leap Years\"\nauthor: \n  - \"Myriam Scansetti\"\n  - \"Antony Clark\"\n  - \"Jon Minton\"\n  - \"Nicoloas Christofidis\"\n  - \"Brendan Clarke\"\n  - \"Kennedy Owuso-Afriyie\"\n  - \"Emu the cat\"\ndate: \"2024-02-28\"\ncode-fold: false\nwarning: false\nmessage: false\ncategories: [R, tidy tuesday, leap years]\n---\n\n\n## Introduction\n\nThe latest TidyTuesday dataset was on births, deaths and other historical events that occurred in leap years, i.e. those years that include 29 February (such as 2024!). Further details are [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2024/2024-02-27). \n\nMyriam led the session, and Antony provided additional code for performing text field analysis after the session. \n\nAlso, Emu the cat had the following contribution to make:\n\n> 43e'/;£@@@@@@@@@@.[^1]\n\n[^1]: I don't think even regex can help us with this one. \n\n## The session\n\nWe started by loading some packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Option 1: tidytuesdayR package \n## install.packages(\"tidytuesdayR\")\n## install.packages(\"waldo\")\n## install.packages(\"tidytext\")\n## install.packages(\"textdata\")\n \nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(waldo)\nlibrary(tidytext)\nlibrary(textdata)\n```\n:::\n\n\nWe then had two ways of loading the data, in this case three datasets. As usual I'm switching to the url-based approach for the blog post\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tuesdata <- tidytuesdayR::tt_load('2024-02-27')\n# ## OR\n# tuesdata <- tidytuesdayR::tt_load(2024, week = 9)\n \n# events <- tuesdata$events\n# births <- tuesdata$births\n# deaths <- tuesdata$deaths\n \n# Option 2: Read directly from GitHub\n \nevents <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-02-27/events.csv')\nbirths <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-02-27/births.csv')\ndeaths <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-02-27/deaths.csv')\n```\n:::\n\n\nWe noticed the births data include mention of at least one Pope. We wanted to explore more and less robust ways of finding popes in the `births` and `deaths` dataset\n\nWe could start by just looking for whether the word `Pope` is in the person field of `births`\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(births$person, \"Pope\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE\n```\n:::\n:::\n\n\nWe then used a little expression to make the query not case sensitive:\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaths %>% filter(str_detect(person, \"(?i)Pope\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  year_death person        description year_birth\n       <dbl> <chr>         <chr>            <dbl>\n1        468 Pope Hilarius <NA>                NA\n```\n:::\n:::\n\n\nAnother approach is to use `ignore_case` in the `regex()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaths %>% filter(str_detect(person, regex(\"pope\", ignore_case = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  year_death person        description year_birth\n       <dbl> <chr>         <chr>            <dbl>\n1        468 Pope Hilarius <NA>                NA\n```\n:::\n:::\n\n\nThe only persons with `pope` in their name appear to be actual popes, not people who just happen to have the letters 'pope' in their surname.\n\n\nNext we looked at number of events by year. We used two tidyverse approaches to producing this, one using `group_by` and `summarise`, the other using `count`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber_events <- events %>% \n  group_by(year) %>% \n  summarise(n= n())\nnumber_events\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 2\n    year     n\n   <dbl> <int>\n 1   888     1\n 2  1504     1\n 3  1644     1\n 4  1704     1\n 5  1712     1\n 6  1720     1\n 7  1768     1\n 8  1796     1\n 9  1892     1\n10  1908     1\n# ℹ 19 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber_events_2 <- events %>% \n  count(year)\nnumber_events_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 2\n    year     n\n   <dbl> <int>\n 1   888     1\n 2  1504     1\n 3  1644     1\n 4  1704     1\n 5  1712     1\n 6  1720     1\n 7  1768     1\n 8  1796     1\n 9  1892     1\n10  1908     1\n# ℹ 19 more rows\n```\n:::\n:::\n\n\nWe then tried different comparator functions to see if they all agreed the contents were identical, with some mixed and confusing results:\n\n::: {.cell}\n\n```{.r .cell-code}\nwaldo::compare(number_events, number_events_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✔ No differences\n```\n:::\n:::\n\n\n`waldo` says they are the same.\n\n::: {.cell}\n\n```{.r .cell-code}\nidentical(number_events, number_events_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n`identical` says they are not identical\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetequal(number_events, number_events_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nBut `setequal` doesn't find differences\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall.equal(number_events, number_events_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Attributes: < Names: 1 string mismatch >\"                                              \n[2] \"Attributes: < Length mismatch: comparison on first 2 components >\"                     \n[3] \"Attributes: < Component \\\"class\\\": Lengths (3, 4) differ (string compare on first 3) >\"\n[4] \"Attributes: < Component \\\"class\\\": 3 string mismatches >\"                              \n[5] \"Attributes: < Component 2: Modes: numeric, externalptr >\"                              \n[6] \"Attributes: < Component 2: Lengths: 29, 1 >\"                                           \n[7] \"Attributes: < Component 2: target is numeric, current is externalptr >\"                \n```\n:::\n:::\n\n\nAll equal reports a number of differences, related to the attributes (metadata) between the two objects being compared. \n\nCuriouser and Curiouser... \n\nNow let's plot the number of events over time \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber_events %>% \n  ggplot(aes(x = year, y = n))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nWe wanted to know if there was anyone who was both recorded as being born and dying in a leap year:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperson_bd <- births %>% \n  inner_join(deaths, by = \"person\")\n\nperson_bd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n  year_birth.x person      description.x year_death.x year_death.y description.y\n         <dbl> <chr>       <chr>                <dbl>        <dbl> <chr>        \n1         1812 James Miln… Scottish-Aus…         1880         1880 Scottish-Aus…\n# ℹ 1 more variable: year_birth.y <dbl>\n```\n:::\n:::\n\n\nOne person (born in Scotland!)\n\nWe then looked text analysis, and in particular sentiment analysis of the content of the descriptio field:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirths %>% \n  unnest_tokens(word, description) %>% \n  anti_join(get_stopwords()) %>% \n  left_join(get_sentiments(\"afinn\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 432 × 5\n   year_birth person        year_death word       value\n        <dbl> <chr>              <dbl> <chr>      <dbl>\n 1       1468 Pope Paul III       1549 <NA>          NA\n 2       1528 Albert V            1579 duke          NA\n 3       1528 Albert V            1579 bavaria       NA\n 4       1528 Domingo Báñez       1604 spanish       NA\n 5       1528 Domingo Báñez       1604 theologian    NA\n 6       1572 Edward Cecil        1638 1st           NA\n 7       1572 Edward Cecil        1638 viscount      NA\n 8       1572 Edward Cecil        1638 wimbledon     NA\n 9       1576 Antonio Neri        1614 florentine    NA\n10       1576 Antonio Neri        1614 priest        NA\n# ℹ 422 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nevents %>% \n  unnest_tokens(word, event) %>% \n  anti_join(get_stopwords()) %>% \n  left_join(get_sentiments(\"afinn\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 418 × 3\n    year word       value\n   <dbl> <chr>      <dbl>\n 1   888 odo           NA\n 2   888 count         NA\n 3   888 paris         NA\n 4   888 crowned       NA\n 5   888 king          NA\n 6   888 west          NA\n 7   888 francia       NA\n 8   888 france        NA\n 9   888 archbishop    NA\n10   888 walter        NA\n# ℹ 408 more rows\n```\n:::\n:::\n\n\nHere's the words in the `afinn` object with the highest (most positive) sentiment\n\n::: {.cell}\n\n```{.r .cell-code}\nget_sentiments(\"afinn\") %>% \n  arrange(desc(value)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,477 × 2\n   word         value\n   <chr>        <dbl>\n 1 breathtaking     5\n 2 hurrah           5\n 3 outstanding      5\n 4 superb           5\n 5 thrilled         5\n 6 amazing          4\n 7 awesome          4\n 8 brilliant        4\n 9 ecstatic         4\n10 euphoric         4\n# ℹ 2,467 more rows\n```\n:::\n:::\n\n\nAnd here's an exploration of average sentiment by (leap)year based on the events description field:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevents |>\n  unnest_tokens(word, event) |>\n  anti_join(get_stopwords()) |>\n  right_join(get_sentiments(\"afinn\")) |>\n  group_by(year) |>\n  summarise(mean_sentiment = mean(value)) |>\n  ggplot(aes(x = year, y = mean_sentiment)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Antony's script\n\nLoad libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(countrycode)\n```\n:::\n\nsome extra data sets re nationalities \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemonym <- readr::read_csv(\"https://raw.githubusercontent.com/knowitall/chunkedextractor/master/src/main/resources/edu/knowitall/chunkedextractor/demonyms.csv\",\n                           col_names = c(\"demonym\",\"geography\"))\n\ndemonym$demonym <- tolower(demonym$demonym)\ndemonym$geography <- tolower(demonym$geography)\ncountry <- tibble(country=countrycode::codelist$country.name.en)\n```\n:::\n\n\nLoad data\n\n::: {.cell}\n\n```{.r .cell-code}\n# tuesdata <- tidytuesdayR::tt_load('2024-02-27')\n\n# list2env(tuesdata,.GlobalEnv)\n\nglimpse(events)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 37\nColumns: 2\n$ year  <dbl> 888, 1504, 1644, 1704, 1712, 1720, 1768, 1796, 1892, 1908, 1912,…\n$ event <chr> \"Odo, count of Paris, is crowned king of West Francia (France) b…\n```\n:::\n\n```{.r .cell-code}\nglimpse(births)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 121\nColumns: 4\n$ year_birth  <dbl> 1468, 1528, 1528, 1572, 1576, 1640, 1692, 1724, 1736, 1792…\n$ person      <chr> \"Pope Paul III\", \"Albert V\", \"Domingo Báñez\", \"Edward Ceci…\n$ description <chr> NA, \"Duke of Bavaria\", \"Spanish theologian\", \"1st Viscount…\n$ year_death  <dbl> 1549, 1579, 1604, 1638, 1614, 1704, 1763, 1822, 1784, 1868…\n```\n:::\n\n```{.r .cell-code}\nglimpse(deaths)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 62\nColumns: 4\n$ year_death  <dbl> 468, 992, 1460, 1528, 1592, 1600, 1604, 1712, 1744, 1792, …\n$ person      <chr> \"Pope Hilarius\", \"Oswald of Worcester\", \"Albert III\", \"Pat…\n$ description <chr> NA, \"Anglo-Saxon archbishop and saint\", \"Duke of Bavaria-M…\n$ year_birth  <dbl> NA, 925, 1401, 1504, 1536, 1529, 1530, 1653, 1683, 1728, 1…\n```\n:::\n:::\n\n\n\nWhich cohort of leap day births is most represented in Wikipedia's data? \n\nAre any years surprisingly underrepresented compared to nearby years? \n\nWhat other patterns can you find in the data?\n\nhow many popes?\n\n::: {.cell}\n\n```{.r .cell-code}\nbirths %>% \n  mutate(is_pope = grepl(\"pope\",tolower(paste(person,description)))) %>% \n  count(is_pope)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  is_pope     n\n  <lgl>   <int>\n1 FALSE     120\n2 TRUE        1\n```\n:::\n:::\n\n\n\ncount births by century ----\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetCenturyCorrected <- function(year) {\n  if (year %% 100 == 0) {\n    century <- year / 100\n  } else {\n    century <- ceiling(year / 100)\n  }\n  return(century)\n}\n\ngetCenturyCorrected(1900)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19\n```\n:::\n\n```{.r .cell-code}\ngetCenturyCorrected(1901)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbirths %>% \n  mutate(century=sapply(year_birth,getCenturyCorrected)) %>% \n  count(century)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  century     n\n    <dbl> <int>\n1      15     1\n2      16     4\n3      17     2\n4      18     3\n5      19    11\n6      20    99\n7      21     1\n```\n:::\n:::\n\n\n\ndo count() and summarise(n=n()) give identical dataframes? Not always ----\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- births %>% count(year_birth)\ny <- births %>% group_by(year_birth) %>% summarise(n=n())\n\nidentical(attributes(x), attributes(y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nnames(x)==names(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\nidentical(\n  x,\n  y\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\na rough stab (clearly flawed) at parsing nationality ----\n\n::: {.cell}\n\n```{.r .cell-code}\nbirths_nationality <-\n  bind_rows(\n    births %>%\n      tidytext::unnest_tokens(word, description) %>%\n      anti_join(tidytext::get_stopwords(), \"word\") %>%\n      left_join(\n        demonym,\n        by = c(word = \"geography\"),\n        relationship = \"many-to-many\"\n      ) %>%\n      left_join(demonym, by = \"demonym\"),\n    \n    births %>%\n      tidytext::unnest_tokens(word, description) %>%\n      anti_join(tidytext::get_stopwords(), \"word\") %>%\n      left_join(demonym, c(word = \"demonym\")) %>%\n      left_join(demonym, \"geography\", relationship = \"many-to-many\")\n  )\n\nbirths_nationality %>% count(geography) %>% arrange(-n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35 × 2\n   geography         n\n   <chr>         <int>\n 1 <NA>            732\n 2 united states   216\n 3 australia        40\n 4 england          39\n 5 canada           24\n 6 zealand          12\n 7 spain            10\n 8 wales             8\n 9 france            6\n10 turkey            6\n# ℹ 25 more rows\n```\n:::\n:::\n\n\nNow a pretty wordcloud\n\n::: {.cell}\n\n```{.r .cell-code}\nevents %>% \n  unnest_tokens(word, event) %>% \n  anti_join(get_stopwords(),\"word\") %>% \n  count(word) %>% \n  {wordcloud::wordcloud(words = .$word, \n            freq = .$n, min.freq = 1,\n            max.words = 20, random.order = FALSE, rot.per = 0.35, \n            colors = RColorBrewer::brewer.pal(8, \"Dark2\"))}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nA neutral word should have a sentiment score of 0, not NA. Let's make that change...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafinn_sentiments <- get_sentiments('afinn')\n\nevents %>% \n  unnest_tokens(word, event) %>% \n  anti_join(get_stopwords(),\"word\") %>% \n  left_join(afinn_sentiments,\"word\") %>% \n  # filter(!is.na(value)) %>% \n  replace_na(list(value=0)) %>% \n  mutate(century = sapply(year,getCenturyCorrected)) %>% \n  group_by(century) %>% \n  summarise(mean_sentiment = mean(value)) %>% \n  ggplot(aes(x=century,y=mean_sentiment))+geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}