{
  "hash": "ffbcde5f8e7751e8a29d21ce1900da35",
  "result": {
    "markdown": "---\ntitle: \"Tidy Tuesday: Self-generated data challenge\"\nauthor: \n    - \"Jon Minton\"\n    - \"Kate Pyper\"\n    - \"Kennedy Owusu-Afriyie\"\n    - \"Brendan Clarke\"\n    - \"Imran Chowdhury\"\n    - \"Andrew Saul\"\ndate: \"2024-05-29\"\nwarning: false\nmessage: false\ncategories: [R, tidy tuesday, data wrangling]\n---\n\n\n## Introduction\n\nFor this session we chose to focus on a data wrangling challenge that Andrew brought to the table, rather than the most recent dataset. The challenge involved converting slightly messy data structure from the first format seen below, to the second (tidy) structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndf <-   tribble(~`...1`, ~`...2`, ~`...3`, ~`...4`, ~`...5`, ~`...6`, ~`...7`, ~`...8`, ~`...9`,\n          NA,NA, NA, \"House Stats in Nov\", NA, \"Flat Stats in Nov\", NA, \"All Stats in Nov\", NA,\n          \"Region\", \"LA\", \"LACode\", \"Count\", \"Sold\", \"Count\", \"Sold\", \"Count\", \"Sold\",\n          \"Scotland\",  \"Minyip\", \"M394932\", \"1000\", \"900\", \"600\", \"300\", \"1600\", \"1200\")\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 9\n  ...1     ...2   ...3    ...4               ...5  ...6        ...7  ...8  ...9 \n  <chr>    <chr>  <chr>   <chr>              <chr> <chr>       <chr> <chr> <chr>\n1 <NA>     <NA>   <NA>    House Stats in Nov <NA>  Flat Stats… <NA>  All … <NA> \n2 Region   LA     LACode  Count              Sold  Count       Sold  Count Sold \n3 Scotland Minyip M394932 1000               900   600         300   1600  1200 \n```\n:::\n\n```{.r .cell-code}\n# desired output\ntribble(~\"region\",  ~\"la\", ~\"la_code\", ~\"house_count\", ~\"house_sold\", ~\"flat_count\", ~\"flat_sold\", ~\"all_count\", ~\"all_sold\",\n        \"Scotland\",  \"Minyip\", \"M394932\", \"1000\", \"900\", \"600\", \"300\", \"1600\", \"1200\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 9\n  region   la     la_code house_count house_sold flat_count flat_sold all_count\n  <chr>    <chr>  <chr>   <chr>       <chr>      <chr>      <chr>     <chr>    \n1 Scotland Minyip M394932 1000        900        600        300       1600     \n# ℹ 1 more variable: all_sold <chr>\n```\n:::\n:::\n\n\nAndrew had a prepared solution. But Kate led the session by developing another solution from scratch\n\n## Katie's solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(fillr)\n \ndf <- \n  tribble(~`...1`, ~`...2`, ~`...3`, ~`...4`, ~`...5`, ~`...6`, ~`...7`, ~`...8`, ~`...9`,\n          NA,NA, NA, \"House Stats in Nov\", NA, \"Flat Stats in Nov\", NA, \"All Stats in Nov\", NA,\n          \"Region\", \"LA\", \"LACode\", \"Count\", \"Sold\", \"Count\", \"Sold\", \"Count\", \"Sold\",\n          \"Scotland\",  \"Minyip\", \"M394932\", \"1000\", \"900\", \"600\", \"300\", \"1600\", \"1200\")\n \nnm1 <- unlist(df[1,])\nnm2 <- unlist(df[2,])\nnm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                ...1                 ...2                 ...3 \n                  NA                   NA                   NA \n                ...4                 ...5                 ...6 \n\"House Stats in Nov\"                   NA  \"Flat Stats in Nov\" \n                ...7                 ...8                 ...9 \n                  NA   \"All Stats in Nov\"                   NA \n```\n:::\n\n```{.r .cell-code}\nnm2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    ...1     ...2     ...3     ...4     ...5     ...6     ...7     ...8 \n\"Region\"     \"LA\" \"LACode\"  \"Count\"   \"Sold\"  \"Count\"   \"Sold\"  \"Count\" \n    ...9 \n  \"Sold\" \n```\n:::\n\n```{.r .cell-code}\nnm1 <- str_extract(nm1, \"\\\\w*(?=\\\\s)\")\nnm1 <- fill_missing_previous(nm1)\nnm1[is.na(nm1)] <- \"\"\nnm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\"      \"\"      \"\"      \"House\" \"House\" \"Flat\"  \"Flat\"  \"All\"   \"All\"  \n```\n:::\n\n```{.r .cell-code}\nnms <- paste(nm1, nm2)\n \nnames(df) <- nms\n \ndf <- clean_names(df[-(1:2),])\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 9\n  region   la     la_code house_count house_sold flat_count flat_sold all_count\n  <chr>    <chr>  <chr>   <chr>       <chr>      <chr>      <chr>     <chr>    \n1 Scotland Minyip M394932 1000        900        600        300       1600     \n# ℹ 1 more variable: all_sold <chr>\n```\n:::\n:::\n\n\nThis solution involved a mixture of tidyverse and base R expressions. Brendan made the point that tidyverse is great at doing 80% of the work needed quickly, but sometimes base R is needed to complete the remaining 20%. \n\n## Other solutions\n\nAndrew proposed the following function for doing the data cleaning. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge_rows <- function(df){ # eg. lst[[1]]\n\n  # convert rows1&2 into columns\n  row1 <- df[1, ] |> t() \n  row2 <- df[2, ] |> t() \n  # remove selected text then fill down NAs\n  row1 <- str_remove(row1, \" Stats in Nov\") |> \n    as_tibble() |> \n    fill(value) |> \n    pull() |> replace_na(\"\")\n\n  row3 <- str_c(row1, \" \", row2) |> \n    str_trim()\n  # create same header vector as original df\n  header_vec <- character()\n  for (i in seq_along(df)){\n    header_vec[i] <- str_c(\"...\", i)\n  }\n  # create tibble with header and 1st row of df\n  tib <-\n    t(row3) |> \n    as_tibble() |> \n    set_names(header_vec) \n  return(tib)\n}\n \ncreate_header_df <- function(df) {\n  merge_rows(df) |> \n    bind_rows(df) |> \n    janitor::row_to_names(1) |> \n    clean_names()\n}\n \ncreate_header_df(df) |> \n  slice(-c(1:2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 18\n# ℹ 18 variables: na <chr>, na_2 <chr>, na_3 <chr>, na_4 <chr>, na_5 <chr>,\n#   na_6 <chr>, na_7 <chr>, na_8 <chr>, na_9 <chr>, na_10 <chr>, na_11 <chr>,\n#   na_12 <chr>, na_13 <chr>, na_14 <chr>, na_15 <chr>, na_16 <chr>,\n#   na_17 <chr>, na_18 <chr>\n```\n:::\n:::\n\n\nAnd Brendan suggested the following tidyverse solution:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnice_names <- tibble(one = unlist(df[1,]), \n       two = unlist(df[2,])) |>\n  mutate(one = str_replace_all(one,  \"Stats in Nov\", \"\")) |>\n  fill(one) |>\n  mutate(three = str_replace_all(paste(one, two), \"NA \", \"\")) |>\n  pull(three)\n\nnames(df) <- nice_names\ndf |>\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 9\n  scotland_na minyip_na m394932_na x1000_na x900_na x600_na x300_na x1600_na\n  <chr>       <chr>     <chr>      <chr>    <chr>   <chr>   <chr>   <chr>   \n1 Scotland    Minyip    M394932    1000     900     600     300     1600    \n# ℹ 1 more variable: x1200_na <chr>\n```\n:::\n:::\n\n\n## Discussion\n\nAfter Kate solved Andrew's problem with lots of time to spare, she then ran through a real-world example that makes use of some similar approaches. The use of `unlist()` to extract vectors to work on was a big part of both solutions. \n\nWe all agreed Kate was excellent with these kinds of data wrangling challenges, despite coding with no prior warning of the challenge and wet hair. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}