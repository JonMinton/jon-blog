{
  "hash": "360008605212bf75ed3c08004dc520fd",
  "result": {
    "markdown": "---\ntitle: \"Tidy Tuesday: Roaming US Holidays\"\nauthor: \n    - \"Brendan Clarke\"\n    - \"Kate Pyper\"\n    - \"Kennedy Owusu-Afriyie\"\n    - Myriam Scansetti\n    - \"Andrew Saul\"\n    - \"Jon Minton\"\ndate: \"2024-06-19\"\ncategories: [R, USA, holidays, Tidy Tuesday]\n---\n\n\nFor this Tardy Tuesday session we looked at [the following Tidy Tuesday data challenge](https://github.com/rfordatascience/tidytuesday/tree/master/data/2024/2024-06-18), which involved identifying the date when various public holidays in the USA (a rare thing) are expected to occur each year.\n\nBrendan led/'scribed' the session\n\n## Analysis\n\nWe used the `tidytuesdayR` package to load the data, then pushed these to the global environment using `list2env`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ntidytuesdayR::tt_load('2024-06-18') |>\n  list2env(envir = .GlobalEnv)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Compiling #TidyTuesday Information for 2024-06-18 ----\n--- There are 2 files available ---\n--- Starting Download ---\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDownloading file 1 of 2: `federal_holidays.csv`\n\tDownloading file 2 of 2: `proposed_federal_holidays.csv`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Download complete ---\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n<environment: R_GlobalEnv>\n```\n:::\n:::\n\n\nOur main dataset looked as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfederal_holidays\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 6\n   date  date_definition official_name year_established date_established details\n   <chr> <chr>           <chr>                    <dbl> <date>           <chr>  \n 1 Janu… fixed date      New Year's D…             1870 1870-06-28       \"Celeb…\n 2 Janu… 3rd monday      Birthday of …             1983 1983-11-02       \"Honor…\n 3 Febr… 3rd monday      Washington's…             1879 NA               \"Honor…\n 4 May … last monday     Memorial Day              1868 NA               \"Honor…\n 5 June… fixed date      Juneteenth N…             2021 2021-06-17       \"Comme…\n 6 July… fixed date      Independence…             1870 NA               \"Celeb…\n 7 Sept… 1st monday      Labor Day                 1894 NA               \"Honor…\n 8 Octo… 2nd monday      Columbus Day              1968 NA               \"Honor…\n 9 Nove… fixed date      Veterans Day              1938 NA               \"Honor…\n10 Nove… 4th thursday    Thanksgiving…             1941 NA               \"Tradi…\n11 Dece… fixed date      Christmas Day             1870 NA               \"The m…\n```\n:::\n:::\n\n\nWe were interested in those 'roaming holidays' where the date column contains a range of dates, and the date definition contains information on the criterion used to determine the specific date for a given year. \n\nWe decided to try to solve the problem manually for MLK day, which should be the third monday in January. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find 3rd monday of january 202x\nwday(\"2024-06-17\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ndate_range <- \"January 15–21\"\nyear <- 2024\n\n# find monday (2) in date range\n\nstart_date <- \"January 15 2024\"\nend_date <- \"January 21 2024\"\nmdy(start_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-01-15\"\n```\n:::\n\n```{.r .cell-code}\nstr_split(date_range, \"–\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"January 15\" \"21\"        \n```\n:::\n\n```{.r .cell-code}\nmonth <- str_extract(date_range, \"[a-zA-Z]+\") \n\ndates <- str_extract_all(date_range, \"[0-9]+\") |>\n  unlist()\n\nstart_end <- ymd(paste(year, month, dates))\n\n# ymd(\"2024-01-16\") %within% interval(start_end[1], start_end[2])\n\ndates_between <- seq(from = start_end[1], to = start_end[2], by = 1)\n\ndates_between[wday(dates_between) == 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-01-15\"\n```\n:::\n:::\n\n\nThen, we generalised this slightly by producing a function that finds the date of MLK day for different given years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlk_day <- function(year){\n  date_range <- \"January 15–21\"\n  \n  month <- stringr::str_extract(date_range, \"[a-zA-Z]+\") \n  \n  dates <- stringr::str_extract_all(date_range, \"[0-9]+\") |>\n    unlist()\n  \n  start_end <- lubridate::ymd(paste(year, month, dates))\n  \n  dates_between <- seq(from = start_end[1], to = start_end[2], by = 1)\n  \n  dates_between[wday(dates_between) == 2] # update day for general\n}\n\nmlk_day(2025)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2025-01-20\"\n```\n:::\n\n```{.r .cell-code}\nmap_vec(1983:2025, mlk_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1983-01-17\" \"1984-01-16\" \"1985-01-21\" \"1986-01-20\" \"1987-01-19\"\n [6] \"1988-01-18\" \"1989-01-16\" \"1990-01-15\" \"1991-01-21\" \"1992-01-20\"\n[11] \"1993-01-18\" \"1994-01-17\" \"1995-01-16\" \"1996-01-15\" \"1997-01-20\"\n[16] \"1998-01-19\" \"1999-01-18\" \"2000-01-17\" \"2001-01-15\" \"2002-01-21\"\n[21] \"2003-01-20\" \"2004-01-19\" \"2005-01-17\" \"2006-01-16\" \"2007-01-15\"\n[26] \"2008-01-21\" \"2009-01-19\" \"2010-01-18\" \"2011-01-17\" \"2012-01-16\"\n[31] \"2013-01-21\" \"2014-01-20\" \"2015-01-19\" \"2016-01-18\" \"2017-01-16\"\n[36] \"2018-01-15\" \"2019-01-21\" \"2020-01-20\" \"2021-01-18\" \"2022-01-17\"\n[41] \"2023-01-16\" \"2024-01-15\" \"2025-01-20\"\n```\n:::\n:::\n\n\nFinally, we generalised this further with a function to find the date of roaming holidays for many different types of holiday and years:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany_day <- function(year, date, date_definition){\n  \n  day <- stringr::str_extract(date_definition, \" .+$\") |>\n    str_trim() \n  \n  weekdays <- paste0(c(\"sun\", \"mon\", \"tues\", \"wednes\", \"thurs\", \"fri\", \"satur\"), \"day\")\n  \n  day_no <- which(weekdays == day)\n  \n  month <- stringr::str_extract(date, \"[a-zA-Z]+\") \n  \n  dates <- stringr::str_extract_all(date, \"[0-9]+\") |>\n    unlist()\n  \n  start_end <- lubridate::ymd(paste(year, month, dates))\n  \n  dates_between <- seq(from = start_end[1], to = start_end[2], by = 1)\n  \n  dates_between[wday(dates_between) == day_no] # update day for general\n}\n\nany_day(2024, \"January 15–21\", \"3rd monday\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-01-15\"\n```\n:::\n\n```{.r .cell-code}\nmovers <- federal_holidays |>\n  filter(date_definition != \"fixed date\") |>\n  expand_grid(year = 1983:2024) \n\nmovers <- movers |>\n  bind_cols(actual_date = pmap_vec(list(year = movers$year, date = movers$date, date_definition = movers$date_definition), any_day))\n\nmovers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 252 × 8\n   date  date_definition official_name year_established date_established details\n   <chr> <chr>           <chr>                    <dbl> <date>           <chr>  \n 1 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 2 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 3 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 4 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 5 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 6 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 7 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 8 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n 9 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n10 Janu… 3rd monday      Birthday of …             1983 1983-11-02       Honors…\n# ℹ 242 more rows\n# ℹ 2 more variables: year <int>, actual_date <date>\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}