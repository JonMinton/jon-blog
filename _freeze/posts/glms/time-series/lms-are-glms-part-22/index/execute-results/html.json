{
  "hash": "acc4f0b2b9a8e803aff31583d7f18b04",
  "result": {
    "markdown": "---\ntitle: \"Part Twenty Two: Time Series - ARIMA in practice\"\nauthor: \"Jon Minton\"\ndate: \"2024-04-30\"\ncategories: [statistics, time series]\ncode-fold: true\nwarning: false\nmessage: false\n---\n\n\n## Recap and purpose of this post\n\nThe last three posts have covered three of the main techniques - [autoregression](../lms-are-glms-part-19/index.qmd), [integration](../lms-are-glms-part-20/index.qmd), and [moving average](../lms-are-glms-part-21/index.qmd) modelling - which combine to form the ARIMA model framework for time series analysis. \n\nThe purpose of this post is to look at an example (or maybe two) showing how ARIMA models are fit and employed in practice. \n\n## Setup \n\nFor this post I'll make use of R's [forecast](https://cran.r-project.org/web/packages/forecast/index.html) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(forecast)\n```\n:::\n\n\n## Dataset used: Airmiles\n\nThe dataset I'm going to use is `airmiles`, an example dataset from the datasets package, which is included in most R sessions by default\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairmiles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime Series:\nStart = 1937 \nEnd = 1960 \nFrequency = 1 \n [1]   412   480   683  1052  1385  1418  1634  2178  3362  5948  6109  5981\n[13]  6753  8003 10566 12528 14760 16769 19819 22362 25340 25343 29269 30514\n```\n:::\n:::\n\n\nThe first thing we notice with this dataset is that it is not in the kind of tabular format we may be used to. Let's see what class the dataset is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(airmiles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ts\"\n```\n:::\n:::\n\n\nThe dataset is of class `ts`, which stands for time series. A `ts` data object is basically a numeric vector with various additional pieces of metadata attached. We can see these metadata fields are start date, end date, and frequency. The documentation for `ts` indicates that if frequency is 1, then the data are annual. As the series are at fixed intervals, with the start date and frequency specified, along with the length of the numeric vector, the time period associated with each value in the series can be inferred.[^1]\n\n[^1]: The information appears to be 'overdeterimined', as one of the metadata fields should be inferrable given the other pieces of information. I suspect this works as something like a 'checksum' test, to ensure the data are as intended. \n\n### Visual inspection of `airmiles`\n\nWe can look at the data using the base graphics plot function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(airmiles)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe can see this dataset is far from stationary, being much higher towards the end of the series than at the start. This implies we should consider differencing the data to make it stationery. We can use the `diff()` function for this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(diff(airmiles))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis differenced series still doesn't look like IID data. Remember that differencing is just one of many kinds of transformation (data pre-processing) we could consider. Also we can difference more than once. \n\nAs there cannot be negative airmiles, and the series looks exponential since the start of the series, we can can consider using a log transform:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(log(airmiles))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nHere the data look closer to a straight line. Differencing the data now should help us get to something closer to stationary:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(diff(log(airmiles)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nMaybe we should also look at differencing the data twice:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(diff(log(airmiles), differences = 2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n**Maybe** this is closer to the kind of stationary series that ARIMA works best with? \n\n### ARIMA fitting for airmiles\n\nThe visual inspection above suggested the dataset definitely needs at least one differencing term applied to it, and might need two; and might also benefit from being pre-transformed by being logged. With the `forecast` package, we can pass the series to the `auto.arima()` function, which will use an algorithm to attempt to identify the best combination of `p`, `d` and `q` terms to use. We can start by asking `auto.arima()` to determine the best ARIMA specification if the only transformation allowed is that of differencing the data, setting the `trace` argument to `TRUE` to learn more about which model specifications the algorithm has considered:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_arima_nolambda <- auto.arima(\n    y = airmiles, \n    trace = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n ARIMA(2,2,2)                    : Inf\n ARIMA(0,2,0)                    : 384.231\n ARIMA(1,2,0)                    : 375.735\n ARIMA(0,2,1)                    : 375.3\n ARIMA(1,2,1)                    : 376.9756\n ARIMA(0,2,2)                    : 377.1793\n ARIMA(1,2,2)                    : Inf\n\n Best model: ARIMA(0,2,1)                    \n```\n:::\n\n```{.r .cell-code}\nsummary(best_arima_nolambda)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries: airmiles \nARIMA(0,2,1) \n\nCoefficients:\n          ma1\n      -0.7031\ns.e.   0.1273\n\nsigma^2 = 1234546:  log likelihood = -185.33\nAIC=374.67   AICc=375.3   BIC=376.85\n\nTraining set error measures:\n                   ME    RMSE      MAE      MPE     MAPE      MASE       ACF1\nTraining set 268.7263 1039.34 758.5374 4.777142 10.02628 0.5746874 -0.2848601\n```\n:::\n:::\n\n\nWe can see from the trace that a range of ARIMA specifications were considered, starting with the ARIMA(2,2,2). The selection algorithm used is detailed [here](https://otexts.com/fpp2/arima-r.html), and employs a variation of AIC, called 'corrected AIC' or AICc, in order to compare the model specifications. \n\nThe algorithm arrives at ARIMA(0, 2, 1) as the preferred specification. That is: no autorgression (p=0), twice differenced (d=2), and with one moving average term (MA=1). \n\nThe Forecasting book linked to above also has a recommended [modelling procedure for ARIMA specifications](https://otexts.com/fpp2/arima-r.html#modelling-procedure), and cautions that the `auto.arima()` function only performs part of this proceudure. In particular, it recommends looking at the residuals   \n\n::: {.cell}\n\n```{.r .cell-code}\ncheckresiduals(best_arima_nolambda)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tLjung-Box test\n\ndata:  Residuals from ARIMA(0,2,1)\nQ* = 4.7529, df = 4, p-value = 0.3136\n\nModel df: 1.   Total lags used: 5\n```\n:::\n:::\n\n\nThe three plots show the model residuals as a function of time (top), the distribution of residuals (bottom right), and the auto-correlation function, ACF (bottom-left), which indicates how the errors at different lags are correlated with each other. It also returns a test score, where *high P-values* (substantially above `0.05`) should be considered evidence that the residuals appear like white noise, and so (something like) no further substantial systematic information in the data exists to be represented in the model.\n\nIn this case, the test statistic p-value is 0.31, which should be reassuring as to the appropriateness of the model specification identified. \n\nFinally, we can use this model to forecast a given number of periods ahead. Let's take this data to the 1990s, even though this is a dangerously long projection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_arima_nolambda |> forecast(h=35) |> autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThe central projection (dark blue line) is almost linear, but the projection intervals are wide and growing, and include projection scenarios where the number of flights in the 1990s are somewhat lower than those in the 1960s. These wide intervals should be considered a feature rather than a bug with the approach, as the further into the future we project, the more uncertain we should become. \n\n### ARIMA modelling with an additional transformation. \n\nAnother option to consider within the `auto.arima()` function is to allow another parameter to be estimated. This is known as the `lambda` parameter and represents an additional possible transformation of the data *before* the differencing step. This `lambda` parameter is used as part of a [Box-Cox Transformation](https://otexts.com/fpp2/transformations.html#mathematical-transformations), intended to stabilise the variance of the series. If the `lambda` parameter is `0`, then this becomes equivalent to logging the data. We can allow `auto.arima` to select a Box-Cox Transformation by setting the parameter `lambda = \"auto\"`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_arima_lambda <- auto.arima(\n    y = airmiles, \n    trace = TRUE,\n    lambda = \"auto\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n ARIMA(2,1,2) with drift         : Inf\n ARIMA(0,1,0) with drift         : 190.0459\n ARIMA(1,1,0) with drift         : 192.1875\n ARIMA(0,1,1) with drift         : 192.1483\n ARIMA(0,1,0)                    : 212.0759\n ARIMA(1,1,1) with drift         : 195.1062\n\n Best model: ARIMA(0,1,0) with drift         \n```\n:::\n\n```{.r .cell-code}\nsummary(best_arima_lambda)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries: airmiles \nARIMA(0,1,0) with drift \nBox Cox transformation: lambda= 0.5375432 \n\nCoefficients:\n        drift\n      18.7614\ns.e.   2.8427\n\nsigma^2 = 194.3:  log likelihood = -92.72\nAIC=189.45   AICc=190.05   BIC=191.72\n\nTraining set error measures:\n                   ME     RMSE      MAE       MPE     MAPE      MASE      ACF1\nTraining set 123.1317 934.6956 724.6794 -5.484572 12.91378 0.5490357 -0.169863\n```\n:::\n:::\n\n\nIn this case, a `lambda` value of about `0.54` has been identified, and a different ARIMA model specification selected. This specification is listed as ARIMA(0,1,0) *with drift*. This *with drift* term means the series are recognised as non-stationary, but where (after transformation) there is an average (in this case) constant amount upwards drift in the values as we progress through the series. [^2] Let's check the residuals for this model:\n\n[^2]: Autoregressive terms `p` can be included as part of non-stationary series, and there can be an arbitrary number of differencing operations `d`, but the moving average term `q` is only suitable for stationary series. So, for example, ARIMA(1,0,0) with drift can be possible, as can ARIMA(1,1,0) with drift, but ARIMA(0,0, 1) with drift is not a legitimate specification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheckresiduals(best_arima_lambda)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tLjung-Box test\n\ndata:  Residuals from ARIMA(0,1,0) with drift\nQ* = 3.9064, df = 5, p-value = 0.563\n\nModel df: 0.   Total lags used: 5\n```\n:::\n:::\n\n\nThe test P-value is even higher in this case, suggesting the remaining residuals appear to behave even more like white noise than in the previous specification. \n\nNow to look at projections from the model into the 1990s:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_arima_lambda |> forecast(h=35) |> autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nUsing this specification we get a qualitatively different long-term projection with, on the identity scale of the data itself, a much narrower long-term projection interval. \n\n### Comparing model specifications\n\nSo, the two different ARIMA specifications arrived at - one with additional pre-transformation of the data before differencing; the other without - lead to qualitatively different long-term projections. Do we have any reason to presume one specification is better than the other? \n\nI guess we could look at the AIC and BIC of the two models:\n\n\n::: {.cell warn='true'}\n\n```{.r .cell-code}\nAIC(best_arima_nolambda, best_arima_lambda)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    df      AIC\nbest_arima_nolambda  2 374.6684\nbest_arima_lambda    2 189.4459\n```\n:::\n\n```{.r .cell-code}\nBIC(best_arima_nolambda, best_arima_lambda)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    df      BIC\nbest_arima_nolambda  2 376.8505\nbest_arima_lambda    2 191.7169\n```\n:::\n:::\n\n\nHere the lower scores for the model with a Box-Cox transformation suggest it should be preferred. However, as both functions warn, the number of observations differ between the two specifications. This is likely because the no-lambda version differences the data twice, whereas the with-lambda specification differences the data once, and so the no-lambda version should have one fewer observation. Let's check this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_obs_nolambda <- summary(best_arima_nolambda)$nobs\n\nn_obs_lambda <- summary(best_arima_lambda)$nobs\n\nprint(paste(\"Observations for no lambda:\", n_obs_nolambda))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Observations for no lambda: 22\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Observations for with-lambda:\", n_obs_lambda))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Observations for with-lambda: 23\"\n```\n:::\n:::\n\n\nYes. This seems to be the cause of the difference. \n\nAnother way of comparing the models is by using the `accuracy()` function, which reports a range of accuracy measures:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"No lambda specification: \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"No lambda specification: \"\n```\n:::\n\n```{.r .cell-code}\naccuracy(best_arima_nolambda)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   ME    RMSE      MAE      MPE     MAPE      MASE       ACF1\nTraining set 268.7263 1039.34 758.5374 4.777142 10.02628 0.5746874 -0.2848601\n```\n:::\n\n```{.r .cell-code}\nprint(\"With-lambda specification: \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"With-lambda specification: \"\n```\n:::\n\n```{.r .cell-code}\naccuracy(best_arima_lambda)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   ME     RMSE      MAE       MPE     MAPE      MASE      ACF1\nTraining set 123.1317 934.6956 724.6794 -5.484572 12.91378 0.5490357 -0.169863\n```\n:::\n:::\n\n\nWhat's returned by `accuracy()` comprises one row (labelled `Training set`) and seven columns, each for [a different accuracy metric](https://otexts.com/fpp2/accuracy.html). A common (and relatively easy-to-understand) accuracy measure is `RMSE`, which stands for (square) root mean squared error. According to this measure, the Box-Cox transformed ARIMA model outperforms the untransformed (by double-differenced) ARIMA model, so perhaps it should be preferred. \n\nHowever, as the act of transforming the data in effect changes (by design) the units of the data, perhaps `RMSE` is not appropriate to use for comparison. Instead, there is a measure called `MAPE`, which stands for \"mean absolute percentage error\", that might be more appropriate to use because of the differences in scales. According to this measure, the Box-Cox transformed specification has a *higher* error score than the no-lambda specification (around 13% instead of around 10%), suggesting instead the no-lambda specification should be preferred instead. \n\nSo what to do? Once again, the 'solution' is probably just to employ some degree of informed subjective judgement, along with a lot of *epistemic humility*. The measures above can help inform our modelling decisions, but they cannot make these decisions for us. \n\n## Discussion and coming up \n\nFor the first three posts in this time-series miniseries, we looked mainly at the theory of the three components of the ARIMA time series modelling approach. This is the first approach where we've used ARIMA in practice. Hopefully you got a sense of two different things: \n\n- That because of packages like `forecast`, getting R to produce and forecast from an ARIMA model is relatively quick and straightforward to do in practice. \n- That even in this brief applied example of applied time series, we started to learn about a range of concepts - such as the auto-correlation function (ACF), the Box-Cox transformation, and alternative measures of accuracy - which were not mentioned in the previous three posts on ARIMA. \n\nIndeed, if you review [the main book associated with the forecasting package](https://otexts.com/fpp2/), you can see that ARIMA comprises just a small part of the overall time series toolkit. There's a lot more that can be covered, including some methods that are simpler to ARIMA, some methods (in particular SARIMA) which are further extensions of ARIMA, some methods that are alternatives to ARIMA, and some methods that are decidedly more complicated than ARIMA. By focusing on the theory of ARIMA in the last three posts, I've aimed to cover something in the middle-ground of the overall toolbox. \n\nComing up: to be determined!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}