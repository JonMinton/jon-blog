{
  "hash": "59b0745c0a513fa319fcc9e4b8b6bd4c",
  "result": {
    "markdown": "---\ntitle: \"Part Twenty: Time Series: Integration\"\ndate: \"2024-04-22\"\nauthor: \"Jon Minton\"\ncode-fold: true\nwarning: false\nmessage: false\ncategories: [statistics, time series]\n---\n\n\n## Recap\n\nIn the [last part of this series](../lms-are-glms-part-19/index.qmd), I discussed why time series data are both a bit dissimilar to many other types of data we try to model, and also 'one weird trick' - autoregression - which allows the standard generalised linear model 'chasis' - that two part equation - to be used with time series data. \n\nWithin the last part, I said **autoregression** was just one of three common tools used for working with time series data, with the other two being **integration** and **moving averages**. Let's now cover those two remaining tools:\n\n\n## Integration \n\nConsider the following time series data: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nset.seed(8)\nt <- 0:30\n\nintercept <- 2.35\nslope <- 0.15\n\ny <- intercept + slope * t + rnorm(31, mean = 0, sd = 0.2)\n\ndf <- tibble(\n    t = t,\n    y = y\n)\n\ndf |>\n    ggplot(aes(t, y)) + \n    geom_point() + \n    geom_line() + \n    expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThis time series data is an example of a *non-stationary* time series. This term means that its value drifts in a particular direction over time. In this case, upwards, meaning values towards the end of the series tend to be higher than values towards the start of the series. \n\nWhat this drift means is that *the order of the observations matters*, i.e. if we looked at the same observations, but in a random order, we wouldn't see something that looks similar to what we're seeing here. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    mutate(rand_selection = sample(0:30)) |>\n    ggplot(aes(rand_selection, y)) + \n    geom_point() + \n    geom_line() + \n    expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nAs it's clear the order of the sequence matters, the standard simplifying assumptions for statistical models of IID (independent and identically distributed) does not hold, so the extent to which observations from the same time series dataset can be treated like new pieces of information for the model is doubtful. We need a way of making the observations that go into the model (though not necessarily what we do with the model after fitting it) more similar to each other, so these observations *can* be treated as IID. How do we do this? \n\nThe answer is something that's blindingly obvious in retrospect. We can *transform* the data that goes into the model by taking the *differences between consecutive values*. So, if the first ten values of our dataset look like this: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df, n=10 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n       t     y\n   <int> <dbl>\n 1     0  2.33\n 2     1  2.67\n 3     2  2.56\n 4     3  2.69\n 5     4  3.10\n 6     5  3.08\n 7     6  3.22\n 8     7  3.18\n 9     8  2.95\n10     9  3.58\n```\n:::\n:::\n\n\nThen we can take the differences between consecutive values and get the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n    arrange(t) |>\n    mutate(diff_y = y - lag(y, 1)) |>\n    head(n=11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 3\n       t     y  diff_y\n   <int> <dbl>   <dbl>\n 1     0  2.33 NA     \n 2     1  2.67  0.335 \n 3     2  2.56 -0.111 \n 4     3  2.69  0.133 \n 5     4  3.10  0.407 \n 6     5  3.08 -0.0188\n 7     6  3.22  0.138 \n 8     7  3.18 -0.0336\n 9     8  2.95 -0.235 \n10     9  3.58  0.634 \n11    10  3.70  0.117 \n```\n:::\n:::\n\n\nSo, as with autoregression (AR), with integration we've arranged the data in order, then used the lag operator. The difference between the use of lagging as a tool for `AR`, and lagging as a tool for integration (`I`), is that, whereas for autoregression, we're using lagging to construct one or more variables to use as predictor terms for the model, within integration we're using lagging to construct new variables for use in either the response or the predictor sides of the model equation. \n\nWhat does our differenced data look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n    arrange(t) |>\n    mutate(diff_y = y - lag(y, 1)) |>\n    ggplot(aes(t, diff_y)) + \n    geom_hline(yintercept = 0) + \n    geom_point() + \n    geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nIn the above I've added a reference line at `y=0`. Note that the average of this series appears to be above the zero line. Let's check this assumption:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndy <- df |>\n    arrange(t) |>\n    mutate(diff_y = y - lag(y, 1)) |>\n    pull(diff_y) \n\nprint(paste0(\"The mean dy is \", mean(dy, na.rm = TRUE) |> round(2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The mean dy is 0.16\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste0(\"The corresponding SE is \", (sd(dy, na.rm=TRUE) / sqrt(length(dy)-1)) |> round(2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The corresponding SE is 0.06\"\n```\n:::\n:::\n\n\nThis mean value of the differences values, $dy$, is about 0.16. This is the *intercept* of the *differenced data*. As we made up the original data, we also know that its *slope* is 0.15, i.e. except for estimation uncertainty, the *intercept* of the differenced data is the *slope* of the original data. [^1]\n\n\n[^1]: Hurray! We've demonstrated something we should know from school, namely that if $y = \\alpha + \\beta x$, then $\\frac{\\partial y}{\\partial x} = \\beta$.\n\nImportantly, when it comes to time series, whereas our original data were not stationary, our differenced data are. This means they are more likely to meet the IID conditions, including that the order of observations no longer really matters as to its value. \n\nOne way of demonstrating this is with a statistical [identity parade](https://royalsocietypublishing.org/doi/epdf/10.1098/rsta.2009.0120). \n\nHere are nine versions of the undifferenced data, eight of which have been randomly shuffled. Can you tell which is the original, unshuffled data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(9)\n\npermute_randomly <- function(id, df){\n    df |> \n        mutate(y = sample(y))\n}\n\ndf_parade <- tibble(\n    id = LETTERS[1:9]\n) |>\n    mutate(data = map(id, permute_randomly, df = df))\n\ndf_parade$data[[5]] <- df\n\ndf_parade |>\n    unnest(data) |> \n    ggplot(aes(t, y)) + \n    geom_point() + \n    geom_line() + \n    facet_wrap(~id)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nHere it seems fairly obvious which dataset is the original, unshuffled version of the data, again illustrating that the original time series are not IID, and not a stationary series. \n\nBy contrast, let's repeat the same exercise with the differenced data: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_df <- df |> \n    arrange(t) |>\n    mutate(diff_y = y - lag(y, 1)) |>\n    select(t, y = diff_y) %>%\n    filter(complete.cases(.))\n\ndiff_df_parade <- tibble(\n    id = LETTERS[1:9]\n) |>\n    mutate(data = map(id, permute_randomly, df = d_df))\n\ndiff_df_parade$data[[5]] <- d_df\n\ndiff_df_parade |>\n    unnest(data) |> \n    ggplot(aes(t, y)) + \n    geom_point() + \n    geom_line() + \n    facet_wrap(~id)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nHere it's much less obvious which of the series is the original series, rather than a permuted/shuffled version of the same series. This should give some reassurance that, after differencing, the data are now IID. \n\n## Why is integration called integration not differencing?\n\nIn the above we have performed what in time series parlance would be called an `I(1)` operation, differencing the data once. But why is this referred to as integration, when we're doing the opposite? \n\nWell, when it comes to transforming the time series data into something with IID properties, we are differentiating rather than integrating. But the flip side of this is that, if using model outputs based on differenced data for forecasting, we have to sum up (i.e. *integrate*) the values we generate in the order in which we generate them. So, the model works on the differenced data, but model forecasts work by integrating the random variables generated by the model working on the differenced data. \n\nLet's explore what this means in practice. Let's generate 10 new values from a model calibrated on the mean and standard deviation of the differenced data: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_draws <- rnorm(\n    10, \n    mean = mean(d_df$y, na.rm = TRUE),\n    sd = sd(d_df$y, na.rm = TRUE)\n)\n\nnew_draws\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.053763359  0.638791031 -0.106726422  0.470132841 -0.084156880\n [6] -0.041865610  0.002496487  0.481433544 -0.082119365  0.086125038\n```\n:::\n:::\n\n\nWe can append these to the end of our differenced data to see how this forecast series compared with the observed series:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_t <- max(d_df$t)\n\nforecast_df <- tibble(\n    t = seq(from = max_t+1, to = max_t + length(new_draws)),\n    y = new_draws,\n    type = \"forecast\"\n)\n\nobs_forecast_df <- bind_rows(\n    d_df |> mutate(type = 'observed'),\n    forecast_df\n)\n\nobs_forecast_df |> \n    ggplot(aes(t, y)) + \n    geom_point(aes(shape = type, colour = type)) +\n    geom_line(aes(linetype = type)) + \n    scale_linetype_manual(values = c(\"observed\" = 'solid', 'forecast' = 'dashed'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nSo we can see that the forecast sequence of values looks quite similar to the differenced observations before it. \n\nIn order to use this for forecasting values, rather than differences, we therefore have to take the last observed value, and keep adding the consecutive forecast values. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_obs_y <- df |> filter(t == max(t)) |> pull(y)\n\naccumulated_new_draws <- cumsum(new_draws)\n\naccumulated_new_draws\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.05376336 0.69255439 0.58582797 1.05596081 0.97180393 0.92993832\n [7] 0.93243481 1.41386835 1.33174898 1.41787402\n```\n:::\n\n```{.r .cell-code}\nforecast_values <- last_obs_y + accumulated_new_draws\n\nforecast_df <- tibble(\n    t = seq(from = max_t+1, to = max_t + length(new_draws)),\n    y = forecast_values,\n    type = \"forecast\"\n)\n\nobs_forecast_df <- bind_rows(\n    df |> mutate(type = 'observed'),\n    forecast_df\n)\n\nobs_forecast_df |> \n    ggplot(aes(t, y)) + \n    geom_point(aes(shape = type, colour = type)) +\n    geom_line(aes(linetype = type)) + \n    scale_linetype_manual(values = c(\"observed\" = 'solid', 'forecast' = 'dashed'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nSo, after integrating (accumulating or summing up) the modelled differenced values, we now see the forecast values continuing the upwards trend observed in the original data. \n\nOf course, there's nothing special about the specific sequence of draws generated from the model. We could run the same exercise multiple times and each time get a different sequence of model draws, and so a different forecast path. Let's see ten draws, for example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_multiple_paths <- function(path_length, n_reps, start_value, mu, sigma, start_t){\n\n    make_path <- function(start_t, mu, sigma, path_length, start_value) {\n        draws <- rnorm(path_length, mean = mu, sd = sigma)\n\n        summed_values <- cumsum(draws)\n        forecast_values <- summed_values + start_value\n\n        out <- tibble(\n            t = seq(from = start_t, to = start_t + path_length - 1),\n            y = forecast_values\n        )\n        return(out)\n    }\n\n    paths <- replicate(\n        n_reps, \n        make_path(\n                    start_t = start_t, \n                    mu = mu, sigma = sigma, path_length = path_length, start_value = start_value\n            )\n    ) |> \n        apply(2, as.data.frame)\n\n    out <- tibble(\n        rep_num = 1:n_reps,\n        data = paths\n    ) |>\n      unnest(data)\n\n    return(out)\n}\n\n\npaths <- make_multiple_paths(\n    path_length = 10, \n    n_reps = 10, \n    mu = mean(d_df$y, na.rm = TRUE),\n    sigma = sd(d_df$y, na.rm = TRUE),\n    start_value = last_obs_y, \n    start_t = max(d_df$t) + 1\n)\n\ndf |>\n    ggplot(aes(t, y)) + \n    geom_point() + geom_line() +\n    geom_line(aes(t, y, group = rep_num), inherit.aes = FALSE, data = paths, alpha = 0.5, colour = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nThis gives a sense of the kinds of upwards-drifting walks are compatible with the amount of variation observed in the original data series. If we ran the experiment another 10 times, we would get another ten paths. \n\nIn fact, we could generate a much larger number of simulations, say 10,000, and then report the range of values within which (say) 50% or 90% of the values for each time period are contained:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmany_paths <- make_multiple_paths(\n    path_length = 10, \n    n_reps = 10000, \n    mu = mean(d_df$y, na.rm = TRUE),\n    sigma = sd(d_df$y, na.rm = TRUE),\n    start_value = last_obs_y, \n    start_t = max(d_df$t) + 1\n)\n\nmany_paths_summary <- many_paths |>\n    group_by(t) |> \n    summarise(\n        med = median(y), \n        lq = quantile(y, probs = 0.25), uq = quantile(y, probs = 0.75), l5 = quantile(y, probs = 0.05), u5 = quantile(y, probs = 0.95)) |> \n    ungroup()\n\ndf |>\n    ggplot(aes(t, y)) + \n    geom_point() + geom_line() +\n    geom_line(\n        aes(t, med), inherit.aes = FALSE, data = many_paths_summary, colour = \"blue\", linewidth = 1.2\n    ) +\n    geom_ribbon(\n        aes(t, ymin = lq, ymax = uq), \n        inherit.aes = FALSE, data = many_paths_summary,\n        colour = NA, alpha = 0.25\n    ) + \n    geom_ribbon(\n        aes(t, ymin = l5, ymax = u5),\n        inherit.aes = FALSE, data = many_paths_summary,\n        colour = NA, alpha = 0.25\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThese produce the kinds of 'fans of uncertainty' we might be used to seeing from a time series forecast. Because of the large numbers of simulations run, the shape of the fans appear quite smooth, and close to the likely analytical solution. \n\n\n## Summing up \n\nIn this post we've explored the second of the three main tools in the most common time series analytical toolkit: Integration. We've differenced our data once, which in time series parlance is represented by the shorthand `d=1`. Then we've integrated estimates we've produced from a model after differencing to represent random paths projecting forward from the observed data into a more uncertain future. Doing this multiple times has allowed us to represent uncertainty about these projections, and the ways that uncertainty increases the further we move from the observed data. \n\n## Coming up \n\nIn the next post, we will look at the final of the three tools in the standard time series toolkit: the moving average.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}