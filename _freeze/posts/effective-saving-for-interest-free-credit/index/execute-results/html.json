{
  "hash": "7a9e787928beb5dc11c4114a3a52ecc7",
  "result": {
    "markdown": "---\ntitle: \"The Effective Savings on Interest-free Credit\"\nauthor: \"Jon Minton\"\ndate: \"2023-12-4\"\ndraft: true\ncode-fold: true\nwarning: false\ncategories: [statistics, finances, R]\n---\n\n\n## Introduction\n\nI have a Monzo account, and as part of the overall Monzo package make use of Monzo Flex, an interest-free credit service which means the payment made in one month is spread over broadly equal payments over the following three months. \n\nHowever, I've always only bought something if I could afford to pay for it in full. \n\nThe reason for using Monzo Flex follows from an intuition: Deferring some of the payment for a good obtained in month $t=0$ to months $\\{t=1, t=2, t=3\\}$ should in effect offer some degree of saving on the cost of the good, as a pound in 1-3 months has a slightly lower value than a pound this month. This is because of inflation, and the higher the rate of inflation, the higher the effective interest-free credit discount should become. \n\nHowever, I've never tried to work out what this effective savings rate is expected to be. Let's try to work that out. \n\nTo do this, we need to consider the following:\n\n1. The relationship between annual inflation rates and monthly inflation rates.\n2. The concept of net present value (NPV). \n\n## Monthly and annual inflation rates \n\nIf prices go up 10% in 12 months, and go up the same % each month, how much do they go up each month? \n\nAn intuitive but wrong answer is that, as there are 12 months per year, the monthly inflation rate will be one twelfth of the annual inflation rate, which would imply a monthly inflation rate of $0.1/12$ or around `0.83%`. So, \n\n$$\n(1 + r_m) = \\frac{1}{12}(1 + r_y)\n$$\nOr equivalently\n\n$$\n(1 + r_y) = 12 (1 + r_m)\n$$\nWhere $r_y$ is the annual increase and $r_m$ is the monthly increase. \n\nHowever this assumption, as mentioned, is wrong, because it ignores the way that each month's increase is applied to the product of all increases that occurred in previous months. For example, for three months with different inflation rates the total increase over the the three months will be\n\n$$\n(1 + r_{1,2,3}) = (1 + r_1)(1+r_2)(1+r_3)\n$$\nIf the monthly inflation rates for each of the three months are the same, $r_m$, then this simplifies slightly to \n\n$$\n(1 + r_{1,2,3}) = (1 + r_m)^3\n$$\n\nBy extension, as there are twelve months in a year, where the monthly inflation rate is fixed the equation becomes:\n\n$$\n(1 + r_y) = (1 + r_m)^{12}\n$$\n\nThis, not $(1 + r_y) = 12 (1 + r_m)$, is the correct starting point. Solve for $r_m$ ...\n\n$$\n(1 + r_y)^{\\frac{1}{12}} = 1 + r_m\n$$\n\n$$\nr_m = {(1 + r_y)}^{\\frac{1}{12}} - 1\n$$\n\nPlugging in a 10% annual inflation rate, i.e. `0.1` for $r_y$, we therefore get an $r_m$ value of around `0.007974`, so around `0.8%`.\n\n## Net Present Value\n\nThe idea of Net Present Value (NPV) is to translate costs and benefits that occur at different points in time onto a single timeframe, the present. This makes it easier to compare options that take place over different timeframes. \n\nIn the Flex example we are comparing two options: \n\n- A) Pay all now\n- B) Pay interest free over three consecutive monthly installments\n\nLet's say the cost of the good at month $t$ is £150. Graphically, and with no interest and inflation, the two options look as follow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndf <- tribble(\n  ~option, ~month, ~amount,\n  \"A\", 0, 150,\n  \"A\", 1, 0,\n  \"A\", 2, 0,\n  \"A\", 3, 0,\n  \"B\", 0, 0,\n  \"B\", 1, 50,\n  \"B\", 2, 50,\n  \"B\", 3, 50\n)\n\ndf |> \n  ggplot(aes(month, amount)) + \n  geom_col() + \n  facet_wrap(~ option, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nIn the no interest / no inflation scenario, the sums for option A and option B are equal, £150. \n\nHowever, in scenarios with inflation, the value of money keeps decreasing. This means that a commitment to pay £50 month 3 is a commitment to pay less than in month 0. Using the 10% annual inflation rate example, we can estimate the cumulative devaluation by months 1, 2 and 3 by *dividing* the product of devaluations so far by the monthly inflation rate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_to_monthly <- function(x) {(1 + x)^(1/12) -1}\n\nannual_inflation <- 0.10\nmonthly_inflation <- annual_to_monthly(annual_inflation)\n\nindex0 <- 1\nindex1 <- index0 / (1 + monthly_inflation)\nindex2 <- index1 / (1 + monthly_inflation)\nindex3 <- index2 / (1 + monthly_inflation)\n\ndf <- tibble(\n  month = 0:3, \n  index = c(index0, index1, index2, index3)\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  month index\n  <int> <dbl>\n1     0 1    \n2     1 0.992\n3     2 0.984\n4     3 0.976\n```\n:::\n:::\n\nContinuing the example of a £150 item paid over months 1, 2 and 3, we can therefore convert to NPV by discounting each month's costs by the index relative to month 0\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- df |> \n  mutate(\n    amount = c(0, 50, 50, 50)\n  ) |> \n  mutate(npv_amount = amount * index)\n\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  month index amount npv_amount\n  <int> <dbl>  <dbl>      <dbl>\n1     0 1          0        0  \n2     1 0.992     50       49.6\n3     2 0.984     50       49.2\n4     3 0.976     50       48.8\n```\n:::\n:::\n\n\nThe sum of `npv_amount` is now less than the £150 in option A, pay upfront. In this example, with 10% inflation, this sum is £147.64, which represents a 1.6% discount on option A. \n\n\nLet's now generalise to other inflation rates\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_npv_discount <- function(ry, total = 150) { \n  annual_to_monthly <- function(x) {(1 + x)^(1/12) -1}\n  \n  rm <- annual_to_monthly(ry)\n  index0 <- 1\n  index1 <- index0 / (1 + rm)\n  index2 <- index1 / (1 + rm)\n  index3 <- index2 / (1 + rm)\n\n  npv_amt1 <- (total / 3) * index1\n  npv_amt2 <- (total / 3) * index2\n  npv_amt3 <- (total / 3) * index3\n  \n  \n  1 - sum(npv_amt1, npv_amt2, npv_amt3) / total\n}\n\ndf <- \n  tibble(\n    annual_rate = seq(0, 0.15, by = 0.01)\n  ) |> \n  mutate(\n    effective_discount = map_dbl(annual_rate, calc_npv_discount)\n  )\n\ngg <- \n  df |> \n    ggplot(aes(100 * annual_rate, 100 * effective_discount)) + \n    geom_line() + \n    labs(x = \"Annual inflation rate (%)\", \n         y = \"Effective discount on paying over 3 months (%)\",\n         title = \"Effective short-term discount rate against inflation rate\"\n         ) + \n    scale_y_continuous(breaks = seq(0, 15, by = 0.1)) +\n    annotate(\"segment\", x = 14.8, xend = 14.8, colour = \"lightblue\", y = 0, yend = 100 * calc_npv_discount(0.148)) +\n    annotate(\"segment\", x = 0, xend = 100 * 0.148, colour = \"lightblue\", y = 100 * calc_npv_discount(0.148), yend = 100 * calc_npv_discount(0.148)) +\n    annotate(\"segment\", x = 9.6, xend = 9.6, colour = \"darkblue\", y = 0, yend = 100 * calc_npv_discount(0.096)) +\n    annotate(\"segment\", x = 0, xend = 100 * 0.096, colour = \"darkblue\", y = 100 * calc_npv_discount(0.096), yend = 100 * calc_npv_discount(0.096)) +\n    annotate(\"segment\", x = 5.3, xend = 5.3, colour = \"darkgrey\", y = 0, yend = 100 * calc_npv_discount(0.053)) +\n    annotate(\"segment\", x = 0, xend = 100 * 0.053, colour = \"darkgrey\", y = 100 * calc_npv_discount(0.053), yend = 100 * calc_npv_discount(0.053)) \n    \ngg +\n    annotate(\"text\", \n             x = 2, y = 0.1 + 100 * calc_npv_discount(0.148),\n             label = \"Goods (Highest)\"\n    ) + \n    annotate(\"text\", \n             x = 2, y = 0.1 + 100 * calc_npv_discount(0.096),\n             label = \"CPIH (Highest)\"\n    ) + \n    annotate(\"text\", \n             x = 2, y = 0.1 + 100 * calc_npv_discount(0.053),\n             label = \"Services (Highest)\"\n    )  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\nIn the above I've indicated the effective discount rates implied by different annual interest rates reported by the ONS in Figure 7 of [this page](https://www.ons.gov.uk/economy/inflationandpriceindices/bulletins/consumerpriceinflation/october2023#:~:text=The%20core%20CPIH%20annual%20inflation,in%20the%20constructed%20historical%20series.) These range from almost 2.3% for goods, to around 0.86% for services. \n\nHowever, fortunately, the current inflation rates are somewhat lower, with the most recent reported inflation rates being 2.9% for goods, 6.2% for services, and 2.7% for CPIH.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg + \n  annotate(\"segment\", x = 2.9, xend = 2.9, colour = \"lightblue\", linetype = \"dashed\", y = 0, yend = 100 * calc_npv_discount(0.029)) +\n  annotate(\"segment\", x = 0, xend = 100 * 0.029, colour = \"lightblue\", linetype = \"dashed\", y = 100 * calc_npv_discount(0.029), yend = 100 * calc_npv_discount(0.029)) +\n  annotate(\"text\", \n           x = 2, y = 0.1 + 100 * calc_npv_discount(0.029),\n           label = \"Goods (Current)\"\n  ) + \n  annotate(\"segment\", x = 4.7, xend = 4.7, colour = \"darkblue\", linetype = \"dashed\", y = 0, yend = 100 * calc_npv_discount(0.047)) +\n  annotate(\"segment\", x = 0, xend = 100 * 0.047, colour = \"darkblue\", linetype = \"dashed\", y = 100 * calc_npv_discount(0.047), yend = 100 * calc_npv_discount(0.047)) +\n  annotate(\"text\", \n           x = 2, y = 0.1 + 100 * calc_npv_discount(0.047),\n           label = \"CPIH (Current)\"\n  ) + \n  annotate(\"segment\", x = 6.2, xend = 6.2, colour = \"darkgrey\", linetype = \"dashed\", y = 0, yend = 100 * calc_npv_discount(0.062)) +\n  annotate(\"segment\", x = 0, xend = 100 * 0.062, colour = \"darkgrey\", linetype=\"dashed\", y = 100 * calc_npv_discount(0.062), yend = 100 * calc_npv_discount(0.062)) +\n  annotate(\"text\", \n           x = 2, y = 0.1 + 100 * calc_npv_discount(0.062),\n           label = \"Services (Current)\"\n  )  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nSo, the effective discount for deferring has fallen alongside inflation. However it's still *something*. \n\nThe immediate *cost* of deferring is by contrast the same. It involves clicking a couple of buttons, so a couple of seconds, in the same Monzo app. \n\nThere are some other consequences too: Using a higher proportion of one's credit limit tends to lower one's credit rating. This means the ability to acquire credit on more favourable terms can be adversely affected. \n\nHowever, for now, as a general principle, realising marginal savings by pressing a couple of buttons doesn't seem too bad, and at some points of time, and for some items, the savings have been around 2%. \n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}